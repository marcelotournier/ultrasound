library(tabulizer)
ghit::install_github("ropensci/tabulizerjars@v0.8.0")
devtools::github("ropensci/tabulizerjars@v0.8.0")
install_github("ropensci/tabulizerjars@v0.8.0")
devtools::install_github("ropensci/tabulizerjars@v0.8.0")
devtools::install_github("ropensci/tabulizer")
ghit::install_github("ropensci/tabulizer")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
devtools::install_github("ropensci/tabulizer@v0.8.0")
library(rJava)
devtools::install_github("ropensci/tabulizer@v0.7.0")
devtools::install_github("ropensci/tabulizer")
ghit::install_github("ropensci/tabulizer")
library('shiny')
require("shiny")
library(tabulizerjars)
library(tabulizer)
devtools::install_github("ropensci/tabulizer")
devtools::install_github("ropensci/tabulizer@0.1.24")
devtools::install_github("ropensci/tabulizer@v0.1.24")
devtools::install_github("ropensci/tabulizer@v0.1.2")
devtools::install_github("ropensci/tabulizer@v0.1.20")
devtools::install_github("ropensci/tabulizer@v0.1")
devtools::install_github("ropensci/tabulizer")
packageVersion("devtools")
update.packages(ask = FALSE)
packageVersion("devtools")
devtools::install_github("ropensci/tabulizer")
devtools::install_github("ropensci/tabulizer", verbose = T)
ghit::install_github("ropensci/tabulizer")
ghit::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"))
library(tabulizer)
devtools::install_github("ropensci/tabulizer@v0.1.18")
devtools::install_github("ropensci/tabulizerjars@v0.9.2")
devtools::install_github("ropensci/tabulizer")
devtools::install_github("ropensci/tabulizerjars")
devtools::install_github("ropensci/tabulizer")
library("tabulizerjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("tabulizerjars")
ghit::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"))
ghit::install_github("ropensci/tabulizerjars")
ghit::install_github(ropensci/tabulizerjars)
ghit::install_github('ropensci/tabulizerjars')
ghit::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"), dependencies = F)
devtools::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"), dependencies = F)
Sys.setenv(JAVA_HOME)
Sys.setenv("JAVA_HOME")
?JAVA_HOME
?JAVA_HOME
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(rJava)
devtools::install_github(c("ropensci/tabulizerjars"))
devtools::install_github(c("ropensci/tabulizer"))
ghit::install_github(c("ropensci/tabulizer"))
require(Rtools)
require('Rtools')
library(devtools)
install_github("ropensci/tabulizer",  dependencies = "FALSE")
install_github("ropensci/tabulizer",  dependencies = "FALSE")
devtools::install_github("ropensci/tabulizer",  dependencies = "FALSE")
library(devtools)
install_github("ropensci/tabulizer",  dependencies = "FALSE")
library(devtools)
library(devtools)
ghit::install_github("ropensci/tabulizer",  dependencies = "FALSE")
packs <- c('stringi', 'httpuv', 'digest', 'htmltools', 'sourcetools', 'evaluate', 'markdown',
'stringr', 'yaml', 'rJava', 'testthat')
laply(packs, function(x){
install.packages(x)
readline(prompt="Press [enter] to continue")
}
)
library(plyr)
packs <- c('stringi', 'httpuv', 'digest', 'htmltools', 'sourcetools', 'evaluate', 'markdown',
'stringr', 'yaml', 'rJava', 'testthat')
laply(packs, function(x){
install.packages(x)
readline(prompt="Press [enter] to continue")
}
)
install.packages(x)
packs <- c('stringi', 'httpuv', 'digest', 'htmltools', 'sourcetools', 'evaluate', 'markdown',
'stringr', 'yaml', 'rJava', 'testthat')
laply(packs, function(x){
install.packages(x)
readline(prompt="Press [enter] to continue")
}
)
library(plyr)
packs <- c('stringi', 'httpuv', 'digest', 'htmltools', 'sourcetools', 'evaluate', 'markdown',
'stringr', 'yaml', 'rJava', 'testthat')
laply(packs, function(x){
install.packages(x)
readline(prompt="Press [enter] to continue")
}
)
install.packages(x)
library(plyr)
packs <- c('stringi', 'httpuv', 'digest', 'htmltools', 'sourcetools', 'evaluate', 'markdown',
'stringr', 'yaml', 'rJava', 'testthat')
laply(packs, function(x){
install.packages(x)
readline(prompt="Press [enter] to continue")
}
)
help("Sys.Date")
Sys.Date(%B)
format(Sys.time(), "%a %b %d %X %Y %Z")
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%a, %b %d %X %Y")
format(Sys.time(), "%A, %b %d %X %Y")
format(Sys.time(), "%A, %d de %B de %X %Y")
format(Sys.time(), "%A, %d de %B de %Y")
format(Sys.time(), "%A, %d de %B de %Y | %X ")
format(Sys.time(), "%A, %d de %B de %Y | %X "))
format(Sys.time(), "%A, %d de %B de %Y | %X ")
format(Sys.time(), "%A, %d de %B de %Y | %X ")
format(Sys.Date(), "%A, %d de %B de %Y | %X ")
format(Sys.Date(), "%A, %d de %B de %Y | %X ")
format(Sys.Date(), "%A, %d de %B de %Y | %X ")
format(Sys.Date(), "%A, %d de %B de %Y")
save.image("~/Google Drive/Marcelo 2018/INOVAlife/DISC-report/DISC-Report-Template.RData")
install.packages("RSQLite")
library("RSQLite")
library("RSQLite")
con = dbConnect(drv="SQLite", dbname=db)
con = dbConnect(drv="SQLite", dbname=db)
db=/Users/mac15/Python/wtforms-sqlalchemy/examples/flask/sample_db.sqlite
db='/Users/mac15/Python/wtforms-sqlalchemy/examples/flask/sample_db.sqlite'
con = dbConnect(drv="SQLite", dbname=db)
con = dbConnect(drv='SQLite', dbname=db)
library(DBI)
dbConnect(RSQLite::SQLite(), dbname=db)
require(DBI)
lite='/Users/mac15/Python/wtforms-sqlalchemy/examples/flask/sample_db.sqlite'
db=dbConnect(RSQLite::SQLite(), dbname=lite)
View(db)
alltables = dbListTables(db)
p1 = dbGetQuery( db,'select * from populationtable' )
p1 = dbGetQuery( db,'select * from cars' )
View(p1)
require(DBI)
lite='/Users/mac15/Python/wtforms-sqlalchemy/examples/flask/sample_db.sqlite'
db=dbConnect(RSQLite::SQLite(), dbname=lite)
#VER LISTA DE TABELAS NA DB:
#alltables = dbListTables(db)
p1 = dbGetQuery( db,'select * from cars' )
View(p1)
require(DBI)
lite='/Users/mac15/Python/forms/profiles.sqlite'
db=dbConnect(RSQLite::SQLite(), dbname=lite)
#VER LISTA DE TABELAS NA DB:
#alltables = dbListTables(db)
p1 = dbGetQuery( db,'select * from cars' )
View(p1)
lite='/Users/mac15/Python/forms/profiles.sqlite'
db=dbConnect(RSQLite::SQLite(), dbname=lite)
alltables = dbListTables(db)
db=dbConnect(RSQLite::SQLite(), dbname=lite)
alltables = dbListTables(db)
alltables = dbListTables(db)
require(DBI)
lite='/Users/mac15/Python/forms/profiles.sqlite'
db=dbConnect(RSQLite::SQLite(), dbname=lite)
#VER LISTA DE TABELAS NA DB:
#alltables = dbListTables(db)
p1 = dbGetQuery( db,'select * from disc' )
View(p1)
p1 = dbGetQuery( db,'select * from disc' )
View(p1)
p1 = dbGetQuery( db,'select * from disc' )
View(p1)
p1 = dbGetQuery( db,'select * from disc' )
View(p1)
source('~/mindset/medteste/mindset.R')
source('~/mindset/medteste/mindset.R')
source('~/mindset/medteste/mindset.R')
install.packages("plumber")
paste0('python sendemail.py ',tlim[3]," ",myhash,'.pdf')
paste0('python sendemail.py ','tlim[3]'," ",myhash,'.pdf')
library(rJava)
ls
dir
source('~/.active-rstudio-document')
c(0054, 0171, 0463, 0030, 0145, 1661, 0019,
0179, 0187, 0302, 0786, 1911, 2414, 3022,
3426, 1167, 0115, 0118, 0017, 0152, 0463,
0153, 1029, 1271, 1394, 1661, 0004, 0013,
0807, 0295, 0016, 0502, 0215, 0919, 0715,
0018, 1417, 0020, 0024, 0901, 0019, 0702,
0021, 0408, 0023, 0054, 0098, 0103,
0128, 0137, 0143, 0067, 0007)
source('~/.active-rstudio-document')
net
sort(net)
source('~/.active-rstudio-document')
net
system("python /Users/mac15/Desktop/test.py")
license()
q()
q()
